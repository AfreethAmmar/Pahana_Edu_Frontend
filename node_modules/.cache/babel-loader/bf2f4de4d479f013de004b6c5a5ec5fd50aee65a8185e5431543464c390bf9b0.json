{"ast":null,"code":"import api, { handleApiError } from './api';\nimport { API_ENDPOINTS } from '../utils/constants';\nexport const authService = {\n  async login(credentials) {\n    try {\n      const response = await api.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\n      if (response.data.sessionId) {\n        localStorage.setItem('sessionId', response.data.sessionId);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('userRole', response.data.user.role);\n      }\n      return {\n        success: true,\n        data: response.data,\n        message: 'Login successful'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n  async logout() {\n    try {\n      await api.post(API_ENDPOINTS.AUTH.LOGOUT);\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('sessionId');\n      localStorage.removeItem('user');\n      localStorage.removeItem('userRole');\n      window.location.href = '/login';\n    }\n  },\n  async register(userData) {\n    try {\n      const response = await api.post(API_ENDPOINTS.AUTH.REGISTER, userData);\n      return {\n        success: true,\n        data: response.data,\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n  async getProfile() {\n    try {\n      const response = await api.get(API_ENDPOINTS.AUTH.PROFILE);\n      return {\n        success: true,\n        data: response.data,\n        message: 'Profile fetched successfully'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put(API_ENDPOINTS.AUTH.PROFILE, profileData);\n      const updatedUser = response.data.user;\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return {\n        success: true,\n        data: response.data,\n        message: 'Profile updated successfully'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n  getSessionId() {\n    return localStorage.getItem('sessionId');\n  },\n  isAuthenticated() {\n    const sessionId = this.getSessionId();\n    const user = this.getCurrentUser();\n    return !!(sessionId && user);\n  },\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user && user.role === role;\n  },\n  hasAnyRole(roles) {\n    const user = this.getCurrentUser();\n    return user && roles.includes(user.role);\n  },\n  isSessionExpired() {\n    const user = this.getCurrentUser();\n    if (!user || !user.tokenExpiry) return false;\n    return new Date().getTime() > user.tokenExpiry;\n  },\n  clearAuthData() {\n    localStorage.removeItem('sessionId');\n    localStorage.removeItem('user');\n    localStorage.removeItem('userRole');\n  }\n};\nexport default authService;","map":{"version":3,"names":["api","handleApiError","API_ENDPOINTS","authService","login","credentials","response","post","AUTH","LOGIN","data","sessionId","localStorage","setItem","JSON","stringify","user","role","success","message","error","apiError","logout","LOGOUT","console","removeItem","window","location","href","register","userData","REGISTER","getProfile","get","PROFILE","updateProfile","profileData","put","updatedUser","getCurrentUser","userStr","getItem","parse","getSessionId","isAuthenticated","hasRole","hasAnyRole","roles","includes","isSessionExpired","tokenExpiry","Date","getTime","clearAuthData"],"sources":["C:/Users/afree/OneDrive/Desktop/frontend/src/services/authService.js"],"sourcesContent":["import api, { handleApiError } from './api';\nimport { API_ENDPOINTS } from '../utils/constants';\n\nexport const authService = {\n  async login(credentials) {\n    try {\n      const response = await api.post(API_ENDPOINTS.AUTH.LOGIN, credentials);\n      \n      if (response.data.sessionId) {\n        localStorage.setItem('sessionId', response.data.sessionId);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('userRole', response.data.user.role);\n      }\n      \n      return {\n        success: true,\n        data: response.data,\n        message: 'Login successful'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n\n  async logout() {\n    try {\n      await api.post(API_ENDPOINTS.AUTH.LOGOUT);\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('sessionId');\n      localStorage.removeItem('user');\n      localStorage.removeItem('userRole');\n      window.location.href = '/login';\n    }\n  },\n\n  async register(userData) {\n    try {\n      const response = await api.post(API_ENDPOINTS.AUTH.REGISTER, userData);\n      \n      return {\n        success: true,\n        data: response.data,\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n\n  async getProfile() {\n    try {\n      const response = await api.get(API_ENDPOINTS.AUTH.PROFILE);\n      \n      return {\n        success: true,\n        data: response.data,\n        message: 'Profile fetched successfully'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put(API_ENDPOINTS.AUTH.PROFILE, profileData);\n      \n      const updatedUser = response.data.user;\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      return {\n        success: true,\n        data: response.data,\n        message: 'Profile updated successfully'\n      };\n    } catch (error) {\n      const apiError = handleApiError(error);\n      return {\n        success: false,\n        message: apiError.message,\n        error: apiError\n      };\n    }\n  },\n\n  getCurrentUser() {\n    try {\n      const userStr = localStorage.getItem('user');\n      return userStr ? JSON.parse(userStr) : null;\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      localStorage.removeItem('user');\n      return null;\n    }\n  },\n\n  getSessionId() {\n    return localStorage.getItem('sessionId');\n  },\n\n  isAuthenticated() {\n    const sessionId = this.getSessionId();\n    const user = this.getCurrentUser();\n    return !!(sessionId && user);\n  },\n\n  hasRole(role) {\n    const user = this.getCurrentUser();\n    return user && user.role === role;\n  },\n\n  hasAnyRole(roles) {\n    const user = this.getCurrentUser();\n    return user && roles.includes(user.role);\n  },\n\n  isSessionExpired() {\n    const user = this.getCurrentUser();\n    if (!user || !user.tokenExpiry) return false;\n    \n    return new Date().getTime() > user.tokenExpiry;\n  },\n\n  clearAuthData() {\n    localStorage.removeItem('sessionId');\n    localStorage.removeItem('user');\n    localStorage.removeItem('userRole');\n  }\n};\n\nexport default authService;"],"mappings":"AAAA,OAAOA,GAAG,IAAIC,cAAc,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,oBAAoB;AAElD,OAAO,MAAMC,WAAW,GAAG;EACzB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAACL,aAAa,CAACM,IAAI,CAACC,KAAK,EAAEJ,WAAW,CAAC;MAEtE,IAAIC,QAAQ,CAACI,IAAI,CAACC,SAAS,EAAE;QAC3BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEP,QAAQ,CAACI,IAAI,CAACC,SAAS,CAAC;QAC1DC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ,CAACI,IAAI,CAACM,IAAI,CAAC,CAAC;QAChEJ,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEP,QAAQ,CAACI,IAAI,CAACM,IAAI,CAACC,IAAI,CAAC;MAC3D;MAEA,OAAO;QACLC,OAAO,EAAE,IAAI;QACbR,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QACnBS,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,QAAQ,GAAGpB,cAAc,CAACmB,KAAK,CAAC;MACtC,OAAO;QACLF,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEE,QAAQ,CAACF,OAAO;QACzBC,KAAK,EAAEC;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMC,MAAMA,CAAA,EAAG;IACb,IAAI;MACF,MAAMtB,GAAG,CAACO,IAAI,CAACL,aAAa,CAACM,IAAI,CAACe,MAAM,CAAC;IAC3C,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,SAAS;MACRR,YAAY,CAACa,UAAU,CAAC,WAAW,CAAC;MACpCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;MAC/Bb,YAAY,CAACa,UAAU,CAAC,UAAU,CAAC;MACnCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF,CAAC;EAED,MAAMC,QAAQA,CAACC,QAAQ,EAAE;IACvB,IAAI;MACF,MAAMxB,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAACL,aAAa,CAACM,IAAI,CAACuB,QAAQ,EAAED,QAAQ,CAAC;MAEtE,OAAO;QACLZ,OAAO,EAAE,IAAI;QACbR,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QACnBS,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,QAAQ,GAAGpB,cAAc,CAACmB,KAAK,CAAC;MACtC,OAAO;QACLF,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEE,QAAQ,CAACF,OAAO;QACzBC,KAAK,EAAEC;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMW,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMN,GAAG,CAACiC,GAAG,CAAC/B,aAAa,CAACM,IAAI,CAAC0B,OAAO,CAAC;MAE1D,OAAO;QACLhB,OAAO,EAAE,IAAI;QACbR,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QACnBS,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,QAAQ,GAAGpB,cAAc,CAACmB,KAAK,CAAC;MACtC,OAAO;QACLF,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEE,QAAQ,CAACF,OAAO;QACzBC,KAAK,EAAEC;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMc,aAAaA,CAACC,WAAW,EAAE;IAC/B,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAMN,GAAG,CAACqC,GAAG,CAACnC,aAAa,CAACM,IAAI,CAAC0B,OAAO,EAAEE,WAAW,CAAC;MAEvE,MAAME,WAAW,GAAGhC,QAAQ,CAACI,IAAI,CAACM,IAAI;MACtCJ,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACuB,WAAW,CAAC,CAAC;MAEzD,OAAO;QACLpB,OAAO,EAAE,IAAI;QACbR,IAAI,EAAEJ,QAAQ,CAACI,IAAI;QACnBS,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,QAAQ,GAAGpB,cAAc,CAACmB,KAAK,CAAC;MACtC,OAAO;QACLF,OAAO,EAAE,KAAK;QACdC,OAAO,EAAEE,QAAQ,CAACF,OAAO;QACzBC,KAAK,EAAEC;MACT,CAAC;IACH;EACF,CAAC;EAEDkB,cAAcA,CAAA,EAAG;IACf,IAAI;MACF,MAAMC,OAAO,GAAG5B,YAAY,CAAC6B,OAAO,CAAC,MAAM,CAAC;MAC5C,OAAOD,OAAO,GAAG1B,IAAI,CAAC4B,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;IAC7C,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDR,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;MAC/B,OAAO,IAAI;IACb;EACF,CAAC;EAEDkB,YAAYA,CAAA,EAAG;IACb,OAAO/B,YAAY,CAAC6B,OAAO,CAAC,WAAW,CAAC;EAC1C,CAAC;EAEDG,eAAeA,CAAA,EAAG;IAChB,MAAMjC,SAAS,GAAG,IAAI,CAACgC,YAAY,CAAC,CAAC;IACrC,MAAM3B,IAAI,GAAG,IAAI,CAACuB,cAAc,CAAC,CAAC;IAClC,OAAO,CAAC,EAAE5B,SAAS,IAAIK,IAAI,CAAC;EAC9B,CAAC;EAED6B,OAAOA,CAAC5B,IAAI,EAAE;IACZ,MAAMD,IAAI,GAAG,IAAI,CAACuB,cAAc,CAAC,CAAC;IAClC,OAAOvB,IAAI,IAAIA,IAAI,CAACC,IAAI,KAAKA,IAAI;EACnC,CAAC;EAED6B,UAAUA,CAACC,KAAK,EAAE;IAChB,MAAM/B,IAAI,GAAG,IAAI,CAACuB,cAAc,CAAC,CAAC;IAClC,OAAOvB,IAAI,IAAI+B,KAAK,CAACC,QAAQ,CAAChC,IAAI,CAACC,IAAI,CAAC;EAC1C,CAAC;EAEDgC,gBAAgBA,CAAA,EAAG;IACjB,MAAMjC,IAAI,GAAG,IAAI,CAACuB,cAAc,CAAC,CAAC;IAClC,IAAI,CAACvB,IAAI,IAAI,CAACA,IAAI,CAACkC,WAAW,EAAE,OAAO,KAAK;IAE5C,OAAO,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGpC,IAAI,CAACkC,WAAW;EAChD,CAAC;EAEDG,aAAaA,CAAA,EAAG;IACdzC,YAAY,CAACa,UAAU,CAAC,WAAW,CAAC;IACpCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;IAC/Bb,YAAY,CAACa,UAAU,CAAC,UAAU,CAAC;EACrC;AACF,CAAC;AAED,eAAetB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}