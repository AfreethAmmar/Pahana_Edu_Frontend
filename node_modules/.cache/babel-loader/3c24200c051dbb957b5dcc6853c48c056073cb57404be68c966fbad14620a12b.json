{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\afree\\\\OneDrive\\\\Desktop\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport authService from '../services/authService';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  const initializeAuth = useCallback(async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const isAuthenticated = authService.isAuthenticated();\n      if (isAuthenticated) {\n        // const user = authService.getCurrentUser();\n\n        if (authService.isSessionExpired()) {\n          await logout();\n          return;\n        }\n        const profileResult = await authService.getProfile();\n        if (profileResult.success) {\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: {\n              user: profileResult.data.user\n            }\n          });\n        } else {\n          dispatch({\n            type: 'LOGIN_FAILURE',\n            payload: 'Session expired'\n          });\n          authService.clearAuthData();\n        }\n      } else {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: 'Failed to initialize authentication'\n      });\n      authService.clearAuthData();\n    }\n  }, []);\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const result = await authService.login(credentials);\n      if (result.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            user: result.data.user\n          }\n        });\n        toast.success('Login successful!');\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: 'LOGIN_FAILURE',\n          payload: result.message\n        });\n        toast.error(result.message);\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Login failed. Please try again.';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n      dispatch({\n        type: 'LOGOUT'\n      });\n      toast.success('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      dispatch({\n        type: 'LOGOUT'\n      });\n    }\n  };\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      dispatch({\n        type: 'CLEAR_ERROR'\n      });\n      const result = await authService.register(userData);\n      if (result.success) {\n        toast.success('Registration successful!');\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: result.message\n        });\n        toast.error(result.message);\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Registration failed. Please try again.';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const result = await authService.updateProfile(profileData);\n      if (result.success) {\n        dispatch({\n          type: 'UPDATE_USER',\n          payload: result.data.user\n        });\n        toast.success('Profile updated successfully!');\n        return {\n          success: true\n        };\n      } else {\n        toast.error(result.message);\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      const errorMessage = 'Failed to update profile. Please try again.';\n      toast.error(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n  const hasRole = role => {\n    return authService.hasRole(role);\n  };\n  const hasAnyRole = roles => {\n    return authService.hasAnyRole(roles);\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    logout,\n    register,\n    updateProfile,\n    hasRole,\n    hasAnyRole,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"laVI7EDQuCKKTc63WwSaZcol1aM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useCallback","authService","toast","jsxDEV","_jsxDEV","AuthContext","initialState","user","isAuthenticated","isLoading","error","authReducer","state","action","type","payload","AuthProvider","children","_s","dispatch","initializeAuth","isSessionExpired","logout","profileResult","getProfile","success","data","clearAuthData","console","login","credentials","result","message","errorMessage","register","userData","updateProfile","profileData","hasRole","role","hasAnyRole","roles","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/afree/OneDrive/Desktop/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useCallback } from 'react';\nimport authService from '../services/authService';\nimport toast from 'react-hot-toast';\n\nconst AuthContext = createContext();\n\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...state,\n        user: action.payload.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case 'LOGIN_FAILURE':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  const initializeAuth = useCallback(async () => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      \n      const isAuthenticated = authService.isAuthenticated();\n      \n      if (isAuthenticated) {\n        // const user = authService.getCurrentUser();\n        \n        if (authService.isSessionExpired()) {\n          await logout();\n          return;\n        }\n        \n        const profileResult = await authService.getProfile();\n        \n        if (profileResult.success) {\n          dispatch({\n            type: 'LOGIN_SUCCESS',\n            payload: { user: profileResult.data.user }\n          });\n        } else {\n          dispatch({\n            type: 'LOGIN_FAILURE',\n            payload: 'Session expired'\n          });\n          authService.clearAuthData();\n        }\n      } else {\n        dispatch({ type: 'SET_LOADING', payload: false });\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: 'Failed to initialize authentication'\n      });\n      authService.clearAuthData();\n    }\n  }, []);\n\n  useEffect(() => {\n    initializeAuth();\n  }, [initializeAuth]);\n\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n      \n      const result = await authService.login(credentials);\n      \n      if (result.success) {\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: { user: result.data.user }\n        });\n        toast.success('Login successful!');\n        return { success: true };\n      } else {\n        dispatch({\n          type: 'LOGIN_FAILURE',\n          payload: result.message\n        });\n        toast.error(result.message);\n        return { success: false, message: result.message };\n      }\n    } catch (error) {\n      const errorMessage = 'Login failed. Please try again.';\n      dispatch({\n        type: 'LOGIN_FAILURE',\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return { success: false, message: errorMessage };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n      dispatch({ type: 'LOGOUT' });\n      toast.success('Logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      dispatch({ type: 'LOGOUT' });\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'CLEAR_ERROR' });\n      \n      const result = await authService.register(userData);\n      \n      if (result.success) {\n        toast.success('Registration successful!');\n        return { success: true };\n      } else {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: result.message\n        });\n        toast.error(result.message);\n        return { success: false, message: result.message };\n      }\n    } catch (error) {\n      const errorMessage = 'Registration failed. Please try again.';\n      dispatch({\n        type: 'SET_ERROR',\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return { success: false, message: errorMessage };\n    }\n  };\n\n  const updateProfile = async (profileData) => {\n    try {\n      const result = await authService.updateProfile(profileData);\n      \n      if (result.success) {\n        dispatch({\n          type: 'UPDATE_USER',\n          payload: result.data.user\n        });\n        toast.success('Profile updated successfully!');\n        return { success: true };\n      } else {\n        toast.error(result.message);\n        return { success: false, message: result.message };\n      }\n    } catch (error) {\n      const errorMessage = 'Failed to update profile. Please try again.';\n      toast.error(errorMessage);\n      return { success: false, message: errorMessage };\n    }\n  };\n\n  const hasRole = (role) => {\n    return authService.hasRole(role);\n  };\n\n  const hasAnyRole = (roles) => {\n    return authService.hasAnyRole(roles);\n  };\n\n  const clearError = () => {\n    dispatch({ type: 'CLEAR_ERROR' });\n  };\n\n  const value = {\n    ...state,\n    login,\n    logout,\n    register,\n    updateProfile,\n    hasRole,\n    hasAnyRole,\n    clearError\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}